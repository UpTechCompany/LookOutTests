Index: app/src/main/java/com/example/uptechapp/activity/fragments/CreateFragment.java
===================================================================
diff --git a/app/src/main/java/com/example/uptechapp/activity/fragments/CreateFragment.java b/app/src/main/java/com/example/uptechapp/activity/fragments/CreateFragment.java
deleted file mode 100644
--- a/app/src/main/java/com/example/uptechapp/activity/fragments/CreateFragment.java	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ /dev/null	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
@@ -1,20 +0,0 @@
-package com.example.uptechapp.activity.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-
-import com.example.uptechapp.R;
-
-public class CreateFragment extends Fragment {
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        return inflater.inflate(R.layout.dialog_fragment, container, false);
-    }
-}
Index: app/src/main/res/layout/activity_splash.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".activity.SplashActivity\"\r\n    android:background=\"@color/dark_gray_figma\">\r\n\r\n    <View\r\n        android:id=\"@+id/ellipse\"\r\n        android:layout_width=\"275dp\"\r\n        android:layout_height=\"275dp\"\r\n        android:layout_alignParentLeft=\"true\"\r\n        android:layout_alignParentTop=\"true\"\r\n        android:layout_marginStart=\"68dp\"\r\n        android:layout_marginTop=\"228dp\"\r\n        android:background=\"@drawable/ellipse\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView\"\r\n        android:layout_width=\"272dp\"\r\n        android:layout_height=\"89dp\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:layout_marginTop=\"92dp\"\r\n        android:gravity=\"center\"\r\n        android:text=\"LOOKOUT\"\r\n        android:textColor=\"@color/purple_figma\"\r\n        android:textSize=\"60dp\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/ellipse\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/ellipse\" />\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_splash.xml b/app/src/main/res/layout/activity_splash.xml
--- a/app/src/main/res/layout/activity_splash.xml	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/src/main/res/layout/activity_splash.xml	(date 1685117458373)
@@ -7,30 +7,18 @@
     tools:context=".activity.SplashActivity"
     android:background="@color/dark_gray_figma">
 
-    <View
-        android:id="@+id/ellipse"
-        android:layout_width="275dp"
-        android:layout_height="275dp"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentTop="true"
-        android:layout_marginStart="68dp"
-        android:layout_marginTop="228dp"
-        android:background="@drawable/ellipse"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
-
     <TextView
         android:id="@+id/textView"
         android:layout_width="272dp"
         android:layout_height="89dp"
-        android:layout_marginStart="4dp"
-        android:layout_marginTop="92dp"
+        android:layout_marginStart="68dp"
+        android:layout_marginTop="320dp"
         android:gravity="center"
         android:text="LOOKOUT"
         android:textColor="@color/purple_figma"
-        android:textSize="60dp"
-        app:layout_constraintStart_toStartOf="@+id/ellipse"
-        app:layout_constraintTop_toTopOf="@+id/ellipse" />
+        android:textSize="60sp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
 
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/uptechapp/dao/EmergencyAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uptechapp.dao;\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.uptechapp.R;\r\nimport com.example.uptechapp.model.Emergency;\r\n\r\nimport java.util.List;\r\n\r\npublic class EmergencyAdapter extends RecyclerView.Adapter<EmergencyAdapter.ViewHolder> {\r\n\r\n    private List<Emergency> emergenciesList;\r\n    static final String TAG = \"AdapterEmergency\";\r\n    private Context context;\r\n\r\n    public EmergencyAdapter(List<Emergency> emergenciesList, Context context) {\r\n        this.emergenciesList = emergenciesList;\r\n        this.context = context;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public EmergencyAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_emergency2, parent, false);\r\n        return new EmergencyAdapter.ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull EmergencyAdapter.ViewHolder holder, int position) {\r\n\r\n        Emergency emergency = emergenciesList.get(position);\r\n\r\n        Log.i(TAG, \"Emergency - \" + emergency.getTitle());\r\n\r\n        holder.setData(\r\n                emergency.getTitle(),\r\n                emergency.getDescription(),\r\n                emergency.getTime(),\r\n                emergency.getPhotoUrl()\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return emergenciesList.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private TextView emergencyTitle, emergencyDescription, emergencyTime;\r\n        private ImageView emergencyPhoto;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            emergencyTitle = itemView.findViewById(R.id.textLabel);\r\n            emergencyDescription = itemView.findViewById(R.id.textDescription);\r\n            emergencyTime = itemView.findViewById(R.id.textDate);\r\n            emergencyPhoto = itemView.findViewById(R.id.imageView);\r\n            emergencyPhoto.setClipToOutline(true);\r\n\r\n        }\r\n\r\n        private void setData(String title, String description, String time, String photo) {\r\n\r\n        try {\r\n            emergencyTitle.setText(title);\r\n            emergencyDescription.setText(description);\r\n            emergencyTime.setText(time.toString());\r\n//            emergencyPhoto.setImageResource(R.drawable.ic_google_logo);\r\n            Glide.with(context).load(photo).into(emergencyPhoto);\r\n         } catch (Exception e) {\r\n                Log.i(TAG, e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/uptechapp/dao/EmergencyAdapter.java b/app/src/main/java/com/example/uptechapp/dao/EmergencyAdapter.java
--- a/app/src/main/java/com/example/uptechapp/dao/EmergencyAdapter.java	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/src/main/java/com/example/uptechapp/dao/EmergencyAdapter.java	(date 1685117458371)
@@ -24,22 +24,26 @@
     private Context context;
 
     public EmergencyAdapter(List<Emergency> emergenciesList, Context context) {
+        Log.d(TAG, "EmergencyAdapter: " + emergenciesList);
         this.emergenciesList = emergenciesList;
         this.context = context;
+        Log.d(TAG, "EmergencyAdapter: CREATE");
     }
 
     @NonNull
     @Override
     public EmergencyAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
         View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_emergency2, parent, false);
+        Log.d(TAG, "onCreateViewHolder: return");
         return new EmergencyAdapter.ViewHolder(view);
     }
 
     @Override
     public void onBindViewHolder(@NonNull EmergencyAdapter.ViewHolder holder, int position) {
-
+        Log.d(TAG, "onBindViewHolder: start");
         Emergency emergency = emergenciesList.get(position);
 
+        Log.d(TAG, "onBindViewHolder: go");
         Log.i(TAG, "Emergency - " + emergency.getTitle());
 
         holder.setData(
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@drawable/launch_logo\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        android:label=\"@string/app_name\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.UptechApp\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".activity.CreateActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"AIzaSyAr3STcIZQx3DkgHZB3JVSUIBToWODhk1c\" />\r\n\r\n        <activity\r\n            android:name=\".activity.MapActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activity.LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activity.MainActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activity.SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/src/main/AndroidManifest.xml	(date 1685117458367)
@@ -6,8 +6,6 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
-    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
 
     <application
         android:allowBackup="true"
Index: app/src/main/java/com/example/uptechapp/activity/MapActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uptechapp.activity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.uptechapp.activity.fragments.CreateFragment;\r\nimport com.example.uptechapp.dao.MapService;\r\nimport com.example.uptechapp.R;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\npublic class MapActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_map);\r\n\r\n        init();\r\n\r\n        SupportMapFragment mapFragment = (SupportMapFragment)\r\n                getSupportFragmentManager().findFragmentById(R.id.google_map);\r\n        mapFragment.getMapAsync(new MapService(this));\r\n        MapService mapService = new MapService(this);\r\n\r\n//        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n//        transaction.replace(R.id.dialog_fragment, new CreateFragment());\r\n//        transaction.addToBackStack(null);\r\n//        transaction.commit();\r\n\r\n    }\r\n\r\n    private void init() {\r\n        BottomNavigationView nav = findViewById(R.id.bottomNavBar);\r\n\r\n\r\n        nav.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                switch (item.getItemId()) {\r\n                    case R.id.nav_feed:\r\n                        Toast.makeText(MapActivity.this, \"Feed\", Toast.LENGTH_SHORT).show();\r\n//                        setFragment(new CategoryFragment());\r\n                        Intent intent = new Intent(MapActivity.this, MainActivity.class);\r\n                        startActivity(intent);\r\n                        return true;\r\n\r\n                    case R.id.nav_create:\r\n                        Toast.makeText(MapActivity.this, \"Create\", Toast.LENGTH_SHORT).show();\r\n//                        setFragment(new LeaderBordFragment());\r\n                        intent = new Intent(MapActivity.this, CreateActivity.class);\r\n                        startActivity(intent);\r\n                        return true;\r\n\r\n                    case R.id.nav_map:\r\n                        Toast.makeText(MapActivity.this, \"MAP\", Toast.LENGTH_SHORT).show();\r\n//                        setFragment(new AccountFragment());\r\n                        intent = new Intent(MapActivity.this, MapActivity.class);\r\n                        startActivity(intent);\r\n\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/uptechapp/activity/MapActivity.java b/app/src/main/java/com/example/uptechapp/activity/MapActivity.java
--- a/app/src/main/java/com/example/uptechapp/activity/MapActivity.java	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/src/main/java/com/example/uptechapp/activity/MapActivity.java	(date 1685117458369)
@@ -2,23 +2,40 @@
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.app.ActivityCompat;
 import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentTransaction;
+import androidx.lifecycle.Observer;
 
+import android.Manifest;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.location.LocationManager;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.MenuItem;
 import android.widget.Toast;
 
-import com.example.uptechapp.activity.fragments.CreateFragment;
+import com.example.uptechapp.MyViewModel;
+import com.example.uptechapp.api.CompleteListener;
+import com.example.uptechapp.dao.Database;
 import com.example.uptechapp.dao.MapService;
 import com.example.uptechapp.R;
+import com.example.uptechapp.model.Emergency;
 import com.google.android.gms.maps.SupportMapFragment;
+import com.google.android.gms.maps.model.LatLng;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class MapActivity extends AppCompatActivity {
 
+    public LatLng latLng;
+    private List<Emergency> myEmergencyList;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -26,10 +43,32 @@
 
         init();
 
+        myEmergencyList = new ArrayList<Emergency>();
+        Database.loadEmergencies(new CompleteListener() {
+            @Override
+            public void OnSuccess() {
+            }
+
+            @Override
+            public void OnFailure() {
+            }
+        });
+        final Observer<List<Emergency>> myObserver = new Observer<List<Emergency>>() {
+            @Override
+            public void onChanged(List<Emergency> emergencies) {
+                Log.d("NIKITA", "INOF");
+                Log.d("NIKITA", String.valueOf(emergencies.size()));
+                myEmergencyList.clear();
+                myEmergencyList.addAll(emergencies);
+            }
+        };
+        MyViewModel.getInstance().getEmergencyLiveData().observe(this, myObserver);
+
+
         SupportMapFragment mapFragment = (SupportMapFragment)
                 getSupportFragmentManager().findFragmentById(R.id.google_map);
-        mapFragment.getMapAsync(new MapService(this));
-        MapService mapService = new MapService(this);
+        mapFragment.getMapAsync(new MapService(this, this, this));
+        MapService mapService = new MapService(this, this, this);
 
 //        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
 //        transaction.replace(R.id.dialog_fragment, new CreateFragment());
@@ -47,22 +86,16 @@
             public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                 switch (item.getItemId()) {
                     case R.id.nav_feed:
-                        Toast.makeText(MapActivity.this, "Feed", Toast.LENGTH_SHORT).show();
-//                        setFragment(new CategoryFragment());
                         Intent intent = new Intent(MapActivity.this, MainActivity.class);
                         startActivity(intent);
                         return true;
 
                     case R.id.nav_create:
-                        Toast.makeText(MapActivity.this, "Create", Toast.LENGTH_SHORT).show();
-//                        setFragment(new LeaderBordFragment());
                         intent = new Intent(MapActivity.this, CreateActivity.class);
                         startActivity(intent);
                         return true;
 
                     case R.id.nav_map:
-                        Toast.makeText(MapActivity.this, "MAP", Toast.LENGTH_SHORT).show();
-//                        setFragment(new AccountFragment());
                         intent = new Intent(MapActivity.this, MapActivity.class);
                         startActivity(intent);
 
Index: app/src/main/java/com/example/uptechapp/activity/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.uptechapp.activity;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.IntentSenderRequest;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.preference.PreferenceManager;\r\nimport android.util.Log;\r\nimport android.view.ViewGroup;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.uptechapp.model.Emergency;\r\nimport com.example.uptechapp.api.EmergencyApiService;\r\nimport com.example.uptechapp.R;\r\nimport com.example.uptechapp.model.User;\r\nimport com.example.uptechapp.api.UsersApiService;\r\nimport com.google.android.gms.auth.api.identity.BeginSignInRequest;\r\nimport com.google.android.gms.auth.api.identity.Identity;\r\nimport com.google.android.gms.auth.api.identity.SignInClient;\r\nimport com.google.android.gms.auth.api.identity.SignInCredential;\r\nimport com.google.android.gms.common.api.ApiException;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"LoginUser\";\r\n    private RelativeLayout layoutGoogle;\r\n    private SignInClient oneTapClient;\r\n    private BeginSignInRequest signInRequest;\r\n    private ActivityResultLauncher<IntentSenderRequest> activityResultLauncher;\r\n    private Dialog progressBar;\r\n    private TextView dialogText;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        init();\r\n\r\n    }\r\n\r\n    private void init() {\r\n\r\n        layoutGoogle = findViewById(R.id.signGoogle);\r\n\r\n        progressBar = new Dialog(this);\r\n        progressBar.setContentView(R.layout.dialog_layout);\r\n        progressBar.setCancelable(false);\r\n        progressBar.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n\r\n        dialogText = progressBar.findViewById(R.id.dialogText);\r\n        dialogText.setText(R.string.progressBarLogging);\r\n\r\n        layoutGoogle.setOnClickListener(v -> googleSignIn());\r\n\r\n        oneTapClient = Identity.getSignInClient(this);\r\n        signInRequest = BeginSignInRequest.builder()\r\n                .setGoogleIdTokenRequestOptions(BeginSignInRequest.GoogleIdTokenRequestOptions.builder()\r\n                        .setSupported(true)\r\n                        .setServerClientId(getString(R.string.default_web_client_id_google))\r\n                        .setFilterByAuthorizedAccounts(false)\r\n                        .build())\r\n                .build();\r\n\r\n        activityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartIntentSenderForResult(), result -> {\r\n\r\n            Log.i(TAG, result.toString());\r\n\r\n            if (result.getResultCode() == RESULT_OK) {\r\n\r\n                try {\r\n\r\n                    SignInCredential credential = oneTapClient.getSignInCredentialFromIntent(result.getData());\r\n                    String idToken = credential.getGoogleIdToken();\r\n\r\n                    if (idToken != null) {\r\n                        String email = credential.getId();\r\n                        Log.i(TAG, \"EMAIL - \" + email);\r\n\r\n                        Log.i(TAG, \"DATA \" + credential.getPhoneNumber());\r\n                        Log.i(TAG, \"DATA-NAME\" + credential.getProfilePictureUri() + \" \" + credential.getGivenName() + \" \" + credential.getDisplayName());\r\n\r\n                        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);\r\n                        SharedPreferences.Editor editor = sharedPref.edit();\r\n\r\n                        // get id from database\r\n\r\n                        User user = new User(\r\n                                -1,\r\n                                credential.getDisplayName(),\r\n                                credential.getId()\r\n                        );\r\n\r\n                        long id = 1L;\r\n\r\n                        editor.putLong(getString(R.string.id_logging), id);\r\n                        editor.apply();\r\n\r\n                        Log.i(TAG, \"ID \" + sharedPref.getLong(getString(R.string.id_logging), 0L));\r\n\r\n                        Intent intent = new Intent(LoginActivity.this, MainActivity.class);\r\n                        startActivity(intent);\r\n                        LoginActivity.this.finish();\r\n\r\n                    } else {\r\n                        Toast.makeText(this, \"User not found\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n\r\n                } catch (ApiException e) {\r\n                    progressBar.dismiss();\r\n\r\n                    Toast.makeText(this, \"API: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                } catch (Exception e) {\r\n                    progressBar.dismiss();\r\n                    Log.i(TAG, e.getMessage());\r\n\r\n                    Toast.makeText(this, \"Something went wrong with getting data\", Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n            } else {\r\n                Toast.makeText(this, \"Something went wrong. Try later\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void googleSignIn() {\r\n\r\n        oneTapClient.beginSignIn(signInRequest)\r\n                .addOnSuccessListener(this, result -> {\r\n                    try {\r\n\r\n                        IntentSenderRequest intentSenderRequest = new IntentSenderRequest.Builder(\r\n                                result.getPendingIntent().getIntentSender()\r\n                        ).build();\r\n\r\n                        activityResultLauncher.launch(intentSenderRequest);\r\n\r\n                    } catch (Exception e) {\r\n                        Toast.makeText(this, \"Exception \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                    }\r\n                })\r\n                .addOnFailureListener(this, e -> Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/uptechapp/activity/LoginActivity.java b/app/src/main/java/com/example/uptechapp/activity/LoginActivity.java
--- a/app/src/main/java/com/example/uptechapp/activity/LoginActivity.java	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/src/main/java/com/example/uptechapp/activity/LoginActivity.java	(date 1685117458368)
@@ -78,8 +78,6 @@
 
         activityResultLauncher = registerForActivityResult(new ActivityResultContracts.StartIntentSenderForResult(), result -> {
 
-            Log.i(TAG, result.toString());
-
             if (result.getResultCode() == RESULT_OK) {
 
                 try {
@@ -110,8 +108,6 @@
                         editor.putLong(getString(R.string.id_logging), id);
                         editor.apply();
 
-                        Log.i(TAG, "ID " + sharedPref.getLong(getString(R.string.id_logging), 0L));
-
                         Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                         startActivity(intent);
                         LoginActivity.this.finish();
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'com.google.gms.google-services'\r\n\r\n}\r\n\r\nandroid {\r\n    namespace 'com.example.uptechapp'\r\n    compileSdk 33\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.uptechapp\"\r\n        minSdk 24\r\n        targetSdk 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_11\r\n        targetCompatibility JavaVersion.VERSION_11\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.appcompat:appcompat:1.6.1'\r\n    implementation 'com.google.android.material:material:1.8.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\r\n    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'\r\n\r\n    // for google authentication\r\n    implementation platform('com.google.firebase:firebase-bom:31.4.0')\r\n    implementation 'com.google.android.gms:play-services-auth:20.5.0'\r\n\r\n    // for google maps\r\n    implementation 'com.google.android.gms:play-services-maps:18.1.0'\r\n\r\n    // for saving photos\r\n    implementation 'com.google.firebase:firebase-storage:20.1.0'\r\n\r\n    // Android\r\n    implementation \"androidx.appcompat:appcompat:$appcompat_version\"\r\n    implementation \"com.google.android.material:material:$material_version\"\r\n    implementation \"androidx.constraintlayout:constraintlayout:$constraint_version\"\r\n\r\n// Navigation\r\n    implementation \"androidx.navigation:navigation-fragment:$nav_version\"\r\n    implementation \"androidx.navigation:navigation-ui:$nav_version\"\r\n\r\n// Retrofit\r\n    implementation \"com.squareup.retrofit2:retrofit:$retrofit_version\"\r\n    implementation \"com.squareup.retrofit2:converter-moshi:$retrofit_version\"\r\n\r\n// Glide\r\n    implementation \"com.github.bumptech.glide:glide:$glide_version\"\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 246fa4ef3c94ffbd1db810b37f4ef96a9237cff2)
+++ b/app/build.gradle	(date 1685117458366)
@@ -35,6 +35,7 @@
     implementation 'androidx.appcompat:appcompat:1.6.1'
     implementation 'com.google.android.material:material:1.8.0'
     implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
+    implementation 'com.google.android.gms:play-services-location:21.0.1'
     testImplementation 'junit:junit:4.13.2'
     androidTestImplementation 'androidx.test.ext:junit:1.1.5'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
Index: app/src/main/java/com/example/uptechapp/api/ListenerLocations.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/uptechapp/api/ListenerLocations.java b/app/src/main/java/com/example/uptechapp/api/ListenerLocations.java
new file mode 100644
--- /dev/null	(date 1685117458371)
+++ b/app/src/main/java/com/example/uptechapp/api/ListenerLocations.java	(date 1685117458371)
@@ -0,0 +1,638 @@
+package com.example.uptechapp.api;
+
+import android.Manifest;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.IntentSender;
+import android.content.ServiceConnection;
+import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.AssetManager;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.database.DatabaseErrorHandler;
+import android.database.sqlite.SQLiteDatabase;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.view.Display;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.app.ActivityCompat;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+
+public class ListenerLocations<Ccontext> extends Context implements LocationListener {
+
+    public static String longitude;
+    public static String latitude;
+
+
+    public static Location imHere; // здесь будет всегда доступна самая последняя информация о местоположении пользователя.
+
+    public static void SetUpLocationListener(Context context) // это нужно запустить в самом начале работы программы
+    {
+        LocationManager locationManager = (LocationManager)
+                context.getSystemService(Context.LOCATION_SERVICE);
+
+        LocationListener locationListener = new ListenerLocations();
+
+        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            // TODO: Consider calling
+            //    ActivityCompat#requestPermissions
+            // here to request the missing permissions, and then overriding
+            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
+            //                                          int[] grantResults)
+            // to handle the case where the user grants the permission. See the documentation
+            // for ActivityCompat#requestPermissions for more details.
+            return;
+        }
+        locationManager.requestLocationUpdates(
+                LocationManager.GPS_PROVIDER,
+                5000,
+                10,
+                locationListener); // здесь можно указать другие более подходящие вам параметры
+
+        imHere = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+
+    }
+
+
+    public static String getLongitude() {
+        return longitude;
+    }
+
+    public static String getLatitude() {
+        return latitude;
+    }
+
+
+    @Override
+    public void onProviderDisabled(String provider) {}
+
+    @Override
+    public void onProviderEnabled(String provider) {}
+
+    @Override
+    public void onLocationChanged(@NonNull Location location) {
+
+    }
+
+    @Override
+    public void onLocationChanged(@NonNull List<Location> locations) {
+        LocationListener.super.onLocationChanged(locations);
+    }
+
+    @Override
+    public void onFlushComplete(int requestCode) {
+        LocationListener.super.onFlushComplete(requestCode);
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {}
+
+    @Override
+    public AssetManager getAssets() {
+        return null;
+    }
+
+    @Override
+    public Resources getResources() {
+        return null;
+    }
+
+    @Override
+    public PackageManager getPackageManager() {
+        return null;
+    }
+
+    @Override
+    public ContentResolver getContentResolver() {
+        return null;
+    }
+
+    @Override
+    public Looper getMainLooper() {
+        return null;
+    }
+
+    @Override
+    public Context getApplicationContext() {
+        return null;
+    }
+
+    @Override
+    public void setTheme(int resid) {
+
+    }
+
+    @Override
+    public Resources.Theme getTheme() {
+        return null;
+    }
+
+    @Override
+    public ClassLoader getClassLoader() {
+        return null;
+    }
+
+    @Override
+    public String getPackageName() {
+        return null;
+    }
+
+    @Override
+    public ApplicationInfo getApplicationInfo() {
+        return null;
+    }
+
+    @Override
+    public String getPackageResourcePath() {
+        return null;
+    }
+
+    @Override
+    public String getPackageCodePath() {
+        return null;
+    }
+
+    @Override
+    public SharedPreferences getSharedPreferences(String name, int mode) {
+        return null;
+    }
+
+    @Override
+    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
+        return false;
+    }
+
+    @Override
+    public boolean deleteSharedPreferences(String name) {
+        return false;
+    }
+
+    @Override
+    public FileInputStream openFileInput(String name) throws FileNotFoundException {
+        return null;
+    }
+
+
+    @Override
+    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
+        return null;
+    }
+
+    @Override
+    public boolean deleteFile(String name) {
+        return false;
+    }
+
+    @Override
+    public File getFileStreamPath(String name) {
+        return null;
+    }
+
+    @Override
+    public File getDataDir() {
+        return null;
+    }
+
+    @Override
+    public File getFilesDir() {
+        return null;
+    }
+
+    @Override
+    public File getNoBackupFilesDir() {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public File getExternalFilesDir(@Nullable String type) {
+        return null;
+    }
+
+    @Override
+    public File[] getExternalFilesDirs(String type) {
+        return new File[0];
+    }
+
+    @Override
+    public File getObbDir() {
+        return null;
+    }
+
+    @Override
+    public File[] getObbDirs() {
+        return new File[0];
+    }
+
+    @Override
+    public File getCacheDir() {
+        return null;
+    }
+
+    @Override
+    public File getCodeCacheDir() {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public File getExternalCacheDir() {
+        return null;
+    }
+
+    @Override
+    public File[] getExternalCacheDirs() {
+        return new File[0];
+    }
+
+    @Override
+    public File[] getExternalMediaDirs() {
+        return new File[0];
+    }
+
+    @Override
+    public String[] fileList() {
+        return new String[0];
+    }
+
+    @Override
+    public File getDir(String name, int mode) {
+        return null;
+    }
+
+    @Override
+    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) {
+        return null;
+    }
+
+    @Override
+    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, @Nullable DatabaseErrorHandler errorHandler) {
+        return null;
+    }
+
+    @Override
+    public boolean moveDatabaseFrom(Context sourceContext, String name) {
+        return false;
+    }
+
+    @Override
+    public boolean deleteDatabase(String name) {
+        return false;
+    }
+
+    @Override
+    public File getDatabasePath(String name) {
+        return null;
+    }
+
+    @Override
+    public String[] databaseList() {
+        return new String[0];
+    }
+
+    @Override
+    public Drawable getWallpaper() {
+        return null;
+    }
+
+    @Override
+    public Drawable peekWallpaper() {
+        return null;
+    }
+
+    @Override
+    public int getWallpaperDesiredMinimumWidth() {
+        return 0;
+    }
+
+    @Override
+    public int getWallpaperDesiredMinimumHeight() {
+        return 0;
+    }
+
+    @Override
+    public void setWallpaper(Bitmap bitmap) throws IOException {
+
+    }
+
+    @Override
+    public void setWallpaper(InputStream data) throws IOException {
+
+    }
+
+    @Override
+    public void clearWallpaper() throws IOException {
+
+    }
+
+    @Override
+    public void startActivity(Intent intent) {
+
+    }
+
+    @Override
+    public void startActivity(Intent intent, @Nullable Bundle options) {
+
+    }
+
+    @Override
+    public void startActivities(Intent[] intents) {
+
+    }
+
+    @Override
+    public void startActivities(Intent[] intents, Bundle options) {
+
+    }
+
+    @Override
+    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException {
+
+    }
+
+    @Override
+    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws IntentSender.SendIntentException {
+
+    }
+
+    @Override
+    public void sendBroadcast(Intent intent) {
+
+    }
+
+    @Override
+    public void sendBroadcast(Intent intent, @Nullable String receiverPermission) {
+
+    }
+
+    @Override
+    public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission) {
+
+    }
+
+    @Override
+    public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras) {
+
+    }
+
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
+
+    }
+
+    @Override
+    public void sendBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission) {
+
+    }
+
+    @Override
+    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras) {
+
+    }
+
+    @Override
+    public void sendStickyBroadcast(Intent intent) {
+
+    }
+
+    @Override
+    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras) {
+
+    }
+
+    @Override
+    public void removeStickyBroadcast(Intent intent) {
+
+    }
+
+    @Override
+    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
+
+    }
+
+    @Override
+    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras) {
+
+    }
+
+    @Override
+    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
+
+    }
+
+    @Nullable
+    @Override
+    public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, int flags) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags) {
+        return null;
+    }
+
+    @Override
+    public void unregisterReceiver(BroadcastReceiver receiver) {
+
+    }
+
+    @Nullable
+    @Override
+    public ComponentName startService(Intent service) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public ComponentName startForegroundService(Intent service) {
+        return null;
+    }
+
+    @Override
+    public boolean stopService(Intent service) {
+        return false;
+    }
+
+    @Override
+    public boolean bindService(Intent service, @NonNull ServiceConnection conn, int flags) {
+        return false;
+    }
+
+    @Override
+    public void unbindService(@NonNull ServiceConnection conn) {
+
+    }
+
+    @Override
+    public boolean startInstrumentation(@NonNull ComponentName className, @Nullable String profileFile, @Nullable Bundle arguments) {
+        return false;
+    }
+
+    @Override
+    public Object getSystemService(@NonNull String name) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public String getSystemServiceName(@NonNull Class<?> serviceClass) {
+        return null;
+    }
+
+    @Override
+    public int checkPermission(@NonNull String permission, int pid, int uid) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkCallingPermission(@NonNull String permission) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkCallingOrSelfPermission(@NonNull String permission) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkSelfPermission(@NonNull String permission) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public void enforcePermission(@NonNull String permission, int pid, int uid, @Nullable String message) {
+
+    }
+
+    @Override
+    public void enforceCallingPermission(@NonNull String permission, @Nullable String message) {
+
+    }
+
+    @Override
+    public void enforceCallingOrSelfPermission(@NonNull String permission, @Nullable String message) {
+
+    }
+
+    @Override
+    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
+
+    }
+
+    @Override
+    public void revokeUriPermission(Uri uri, int modeFlags) {
+
+    }
+
+    @Override
+    public void revokeUriPermission(String toPackage, Uri uri, int modeFlags) {
+
+    }
+
+    @Override
+    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkCallingUriPermission(Uri uri, int modeFlags) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public int checkUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags) {
+        return PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
+
+    }
+
+    @Override
+    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
+
+    }
+
+    @Override
+    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
+
+    }
+
+    @Override
+    public void enforceUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags, @Nullable String message) {
+
+    }
+
+    @Override
+    public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException {
+        return null;
+    }
+
+    @Override
+    public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException {
+        return null;
+    }
+
+    @Override
+    public Context createConfigurationContext(@NonNull Configuration overrideConfiguration) {
+        return null;
+    }
+
+    @Override
+    public Context createDisplayContext(@NonNull Display display) {
+        return null;
+    }
+
+    @Override
+    public Context createDeviceProtectedStorageContext() {
+        return null;
+    }
+
+    @Override
+    public boolean isDeviceProtectedStorage() {
+        return false;
+    }
+
+}
